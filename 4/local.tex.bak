%%%%%%%%%%%%%%%%%%%%%%%%%%
\chapter{Local Legalization Stage}
\label{chap:COP}
%%%%%%%%%%%%%%%%%%%%%%%%%%


After the first stage, the circles that represent modules have
been uniformly distributed over a specified region and total
wirelength is minimized. Now, we have to determine the exact
locations and shapes of modules so that no two modules overlap and
the modules are placed inside the outline. Before that, in order
to keep the optimization results of the first stage, we first have
to extract the geometric relations between modules based on the
distribution of circles.


\section{Constraint Graph Construction} \label{subsec:cg}

In this stage, we utilize the Delaunay Triangulation
(DT)~\cite{Jin06} method to get the necessary geometrical
relations between modules. Given a distribution of objects,
neighboring objects can be identified by an edge in a triangle
after applying the method. Then, the geometrical relation between
the neighboring objects can be determined according to their
relative positions. Finally, a horizontal constraint graph
(denoted by $C_h$) and a vertical constraint graph ($C_v$) can be
built with these relations.

First, we recover the shape of a module from a circle to a square,
and place it at the location with its center overlapping original
circle's center. Then, the Delaunay Triangulation (DT)
method~\cite{Jin06} is applied on the centers of the modules, and
a set of triangles are obtained, we call it a {\bf DT} graph. For
each triangle (denoted by $\triangle(n_i, n_j, n_k)$), each node
$n_i$ denotes a module $m_i$ and an edge ($n_i$, $n_j$) denotes
that $m_i$ and $m_j$ are in the neighboring locations. For each
pair of modules corresponding to an edge in a triangle, their
geometrical relation needs to be considered.


Now, we'd like to determine the geometrical relation between
modules $m_i$ and $m_j$ corresponding to each edge ($n_i$, $n_j$)
in the graph. Depending on whether the two modules overlap, we can
classify it into two cases as follows:
\begin{itemize}
\item  {\bf $m_i$ and $m_j$ separate:} The rectangle, denoted by
$R_{i,j}^s$, formed by the centers of the modules is taken. Let
$d_w$ and $d_h$ denote the width and height of the rectangle. If
$d_w>d_h$, $m_i$ and $m_j$ have horizontal relation (denote by
$m_i \vdash m_j$). Otherwise, $m_i$ and $m_j$ have vertical
relation (denote by $m_i \perp m_j$).

\item  {\bf $m_i$ and $m_j$ overlap:} The rectangle, denoted by
$R_{i,j}^o$, formed by the overlapped area is taken. Opposite of
the previous case, $m_i \perp m_j$ if $d_w > d_h$; otherwise, $m_i
\vdash m_j$.
\end{itemize}

An edge ($n_i$, $n_j$) is called the transitive edge ($n_i$,
$n_j$) if there exists a path between $n_i$ and $n_j$ except the
edge ($n_i$, $n_j$). In order to decrease the number of
constraints, the transitive edge ($n_i$, $n_j$) should not be
added during construction of constraint graphs. Such edge can be
eliminated easily during building constraint graphs. For each
triangle, we just need to ignore the edge with the longest length
if three edges have the same geometrical relation.

Figure~\ref{fig::con_gf} shows how to construct horizontal and
vertical constraint graphs from the result of the first stage. The
circles in Fig~\ref{fig::con_gf}(a) shows the initial distribution
of circles and the dotted line enclosing the circles are the
initial shapes of modules. After applying the Delaunay
Triangulation (DT) method on the centers of the circles, a set of
triangles is obtained as shown in Fig~\ref{fig::con_gf}(b). Note
that each neighboring modules are described by an edge in a
triangle. Therefore, the relations of modules corresponding to
each edge are extracted. See the edge ($n_1, n_{10}$) in the
triangle $\triangle(n_1, n_3, n_{10})$ for example. Since the
modules $m_{10}$ and $m_{1}$ overlap in the initial placement, we
determine their relation according to the rectangle, $R_{10,1}^o$,
formed by the overlap area of the two modules. Because $d_w < d_h$
and it is more efficient to separate them in horizontal direction,
the relation is denoted as $m_{10} \vdash m_{1}$. Besides, since
all the three edges in $\triangle(n_1, n_3, n_{10})$ have
horizontal geometrical relations, the longest edge ($n_{10}, n_3$)
can be ignored directly. In the other case, see an edge
($n_7$,$n_9$) in the triangle $\triangle(n_2, n_7, n_9$). Because
$m_7$ and $m_9$ do not overlap, we take the rectangle,$R_{7,
9}^s$, formed by the centers of $m_7$ and $m_9$ and consider $m_7
\perp m_9$ because $d_w < d_h$. The longest edge ($n_7$, $n_2$) is
also ignored because the three edges have vertical relations. The
resulting constraint graphs are shown in Fig~\ref{fig::con_gf}(d).

\begin{figure}[htb]
  \centering
  \centerline{\psfig{figure=figure/fig4-1.eps,width=13cm}}
     \vspace{-2mm}
  \caption{
     \footnotesize
     (a) The distribution of circles after the global distribution stage.
     (b) The DT graph after applying Delaunay Triangulation
     method on the result shown in (a).
     (c) Rectangles between two circles.
     (d) Constraint Graphs.
   }
  \label{fig::con_gf}
\end{figure}

\section{QOPL : Quadratic Optimization Programming for
Legalization} \label{subsec: SCOP2}

Before introducing {\bf QOPL}, we need the following definitions:

\begin{itemize}

\item ({$x_i$, $y_i$}): ($x_i$,$y_i$) denotes the bottom-left
coordinate of a module $m_i$.

\item $w_i$ (or $h_i$): $w_i$ ($h_i$) represents the width
(height) of $m_i$.

\item {$N_s^{h}$} (or {$N_e^{h}$}): $N_s^{h}$ ({$N_e^{h}$})
denotes a set of nodes with zero in-degree (out-degree) in $C_h$.

\item {$N_s^{v}$} (or {$N_e^{v}$}): $N_s^{v}$ ({$N_e^{v}$})
denotes a set of node with zero in-degree (out-degree) in $C_v$.

\end{itemize}

Based on the constructed constraint graphs introduced the previous
subsection, we use a quadratic function to reshape modules so that
modules can be placed into a fixed-outline and no two modules
overlap as follows:


\begin{eqnarray}\label{object}
    \min \hspace{0.05cm}\{(W-W_{f})^2+  (H-H_{f})^2\}
    \label{obj}
\end{eqnarray}

s.t.
\begin{eqnarray}\label{constraints12}
  x_i+w_i \leq x_j, \hspace{1.1cm} \forall (n_i, n_j)\in C_h \label{hor_cont}\\
  y_i+h_i \leq y_j, \hspace{1.1cm} \forall (n_i, n_j)\in C_v  \label{ver_cont}\\
  x_s \geq 0, \hspace{2.1cm} \forall n_s \in N_s^h \label{her_0_cont}\\
  x_e +w_e \leq W \hspace{2.1cm} \forall n_e \in N_e^h \label{her_1_cont}\\
  y_s  \geq 0,\hspace{2.1cm} \forall n_s  \in N_s^v \label{ver_0_cont}\\
  y_e  + h_e  \leq H \hspace{2.1cm} \forall n_e \in N_e^v \label{ver_1_cont}
\end{eqnarray}

To satisfy the {\bf fixed-outline constraint}, the objective
function tries to minimize the square of the difference between
predefined width (height) and the resulting width (height) as
shown in the objective function in Equation~\ref{obj}.
Inequations~\ref{hor_cont} and~\ref{ver_cont} are {\bf non-overlap
constraints} for neighboring modules in horizontal and vertical
constraint graphs, respectively. Inequations~\ref{her_0_cont}\ to
\ref{ver_1_cont} are {\bf boundary constraints} that restrict all
boundary modules are placed inside the outline.
Inequation~\ref{her_0_cont} (\ref{her_1_cont}) makes modules in
the left (right) boundary whose $x$-coordinates larger (smaller)
than zero ($W$). Similarly, the $y$-coordinates of modules in the
bottom (top) boundary are larger (smaller) than zero ($H$) by
Inequations~\ref{ver_0_cont} (\ref{ver_1_cont}). Note that only
those modules in the boundary are constrained, then other modules
can be placed inside the boundary as well by the non-overlap
constraints. It greatly reduces the number of constraints.

Different from the representation based floorplanner that compact
modules toward bottom-left side, the analytical based approach can
spread modules uniformly among the placement region, which implies
better wirelength. Figure~\ref{fig::QOPLn30}(a) and(b) shows that
the moving of $b_1$ and $b_3$ from bottom-left packing and the
their HPWL(dash line) becomes less. The same moving of $b_2$ and
$b_3$ reduces their HPWL too. Then, it's quite obvious in
legalizing n30 with uniform white space( As shown in
Figure~\ref{fig::QOPLn30}(c)).


\begin{figure}[htb]
  \centering
  \centerline{\psfig{figure=figure/QOPLn30mod.eps,width=10cm}}
     \vspace{-2mm}
  \caption{
     \footnotesize
     (a) Optimization of wirelength by redistributing modules.
     (b) QOPL legalizes n30 with uniform white space
     distribution. ($\Gamma = 10\%$)
   }
  \label{fig::QOPLn30}
\end{figure}


\section{Hierarchical UFO Flow} \label{subsec:cg}

Note that we don't add the aspect ratio constraints in the above
formulation. Given constraint graphs and the aspect ratio
constraint, the fixed-outline floorplanning with zero dead space
may not be achieved.
%It highly depends on the initial floorplan.
However, if there exist larger dead space or modules can be
uniformly distributed to the placement region in the global
distribution stage, it has greater chance to achieve it. In
Figure~\ref{fig::5p-non} , we'll show that all modules can be
legalized after first applying QOPL in the case with 5\% dead
space (i.e., $\Gamma = 5\%$). However, some modules may violate
aspect ratio constraints in the zero dead space (i.e., $\Gamma =
0\%$) as shown in Figures~\ref{fig::n10to300}. In such condition,
we only have to redistribute the modules in a sub-region. Note
that even in such a condition, the number of violated modules does
not increase proportional to the size of modules in a circuit.
This also shows that our global distribution stage can actually
spread modules over the placement region uniformly.

\begin{figure}[htb]
  \centering
  \centerline{\psfig{figure=figure/n30n50violated.eps,width=15cm}}
     \vspace{-2mm}
  \caption{
     \footnotesize
     (a) Initial floorplan of n30 after first QOPL.  (b) Resulting floorplan of n30 after
     hierarchical UFO is applied.
     (c) Initial floorplan of n50 after first QOPL.  (d) Resulting floorplan of n50 after
     hierarchical UFO is applied.
   }
  \label{fig::refinement}
\end{figure}


\begin{figure}[htb]
  \centering
  \centerline{\psfig{figure=figure/n10to300-5.eps,width=15cm}}
     \vspace{-2mm}
  \caption{
     \footnotesize
      There exists no violated module violates the aspect ratio constraint after first applying QOPL ($\Gamma = 5\%$ ).
      (a) n10 (b) n30 (c) n50 (d) n100 (e) n200 (f) n300
   }
  \label{fig::5p-non}
\end{figure}

\begin{figure}[htb]
  \centering
  \centerline{\psfig{figure=figure/n10to300.eps,width=15cm}}
     \vspace{-2mm}
  \caption{
     \footnotesize
     The number of modules that violate the aspect ratio constraint after first applying QOPL ($\Gamma = 0\%$ ).
     (a) 0 in n10;  (b) 3 in n30;  (c) 2 in n50;
     (d) 9 in n100; (e) 14 in n200; (f) 7 in n300;
   }
  \label{fig::n10to300}
\end{figure}


If there exist modules that violate the aspect ratio constraint
after first QOPL, we will divide the region quadratually and apply
{\bf PP} model to the region in which such modules exist. This
hierarchical procedure not only can repair the violations, but
also improve the results in wirelength. After these process, QOPL
is applied again to obtain a final floorplan. For example,
Figure~\ref{fig::refinement}(a) is an initial floorplan of n30
after first QOPL in the zero dead space fixed-outline floorplan.
There exist three modules violating the aspect ratio constraint.
We divide the region into four parts I, II, III, IV as labels in
the figure. Since the violated modules are in the regions III and
IV, we only need to apply {\bf PP} model to these regions. Then,
QOPL is applies again to obtain a legal floorplan as shown in
Figure~\ref{fig::refinement}(b).  Note that we almost do not
change the locations of modules in regions I and II.
Fig~\ref{fig::refinement}(c) and (d) shows another example for
n50.
